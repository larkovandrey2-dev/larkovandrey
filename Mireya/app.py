import asyncio
import logging
import datetime
import os
from email import message

import aiohttp
from aiogram.enums import ParseMode
from aiogram.types import InlineKeyboardButton
import database_scripts
import kbs.inline as inline
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters.command import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import CallbackQuery, sticker, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from supabase import create_client, Client
from datetime import date

import scripts

ADMINS = os.getenv("ADMINS")
logging.basicConfig(level=logging.INFO)
bot = Bot(token="8466015804:AAEt2BWKawjYRbBxhiinKB3JCZaw0-1NMTU")

# –ê–¥–º–∏–Ω–∫–∞ - –¥–æ–±–∞–≤–ª—è—Ç—å –≤–æ–ø—Ä–æ—Å—ã,—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã,–º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å –≤—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ

dp = Dispatcher()

class UserChanges(StatesGroup):
    age = State()
    education = State()
class UserConfig(StatesGroup):
    age = State()
    sex = State()
    education = State()


class Questions(StatesGroup):
    questions = State()


class Admins(StatesGroup):
    edit_question = State()
    new_question = State()


@dp.message(Command('admin'))
async def admin_command(message: types.Message):
    if str(message.from_user.id) in ADMINS:
        builder = await inline.create_admin_commands()
        await message.answer('–î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ', reply_markup=builder.as_markup())
    else:
        await message.answer('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.')


@dp.callback_query(F.data.startswith('admin_delete_questions'))
async def admin_delete_questions_list(call: CallbackQuery):
    questions = await database_scripts.all_questions()
    kb = await inline.create_deletion_question_list(questions)
    await call.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –≤–æ–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:', reply_markup=kb.as_markup())


@dp.callback_query(F.data.startswith('delete_question'))
async def delete_question(call: CallbackQuery):
    await call.message.delete()
    data = call.data.split('_')
    survey_index = int(data[2])
    question_index = int(data[3])
    await database_scripts.delete_question(question_index, survey_index)
    async with aiohttp.ClientSession() as session:
        response = await session.get(f"http://127.0.0.1:8000/api/get_questions/{survey_index}")
        response = await response.json()
        response = response["data"]
    if response:
        first_question_index = int(response[0]['question_index'])
        for i in range(1, len(response)):
            await database_scripts.change_question_index(int(response[i]['question_index']),
                                                         int(response[i]['survey_index']),
                                                         first_question_index + i + 1)
    await call.message.answer('–£–¥–∞–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ')
    await admin_delete_questions_list(call)


@dp.callback_query(F.data.startswith('admin_show_questions'))
async def admin_show_questions_actions(call: CallbackQuery):
    if str(call.from_user.id) in ADMINS:
        questions = await database_scripts.all_questions()
        kb = await inline.create_edit_questions_kb(questions)
        await call.message.answer(
            '–ù–∏–∂–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ –≤–∏–¥–µ: –Ω–æ–º–µ—Ä –æ–ø—Ä–æ—Å–∞ || —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞. –ú–æ–∂–µ—Ç–µ –º–µ–Ω—è—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—ã–µ',
            reply_markup=kb.as_markup())


@dp.callback_query(F.data.startswith('new_question'))
async def new_question_start(call: CallbackQuery, state: FSMContext):
    await call.message.delete()
    await call.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –Ω–æ–º–µ—Ä –æ–ø—Ä–æ—Å–∞ | —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞')
    await state.set_state(Admins.new_question)


@dp.callback_query(F.data.startswith('change_question'))
async def edit_question(call: CallbackQuery, state: FSMContext):
    data = call.data.split('_')
    survey_index = data[2]
    question_index = data[3]
    await call.message.answer(f'–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ {question_index} –∏–∑ –æ–ø—Ä–æ—Å–∞ {survey_index}')
    await state.update_data(question_index=question_index)
    await state.update_data(survey_index=survey_index)
    await state.set_state(Admins.edit_question)


@dp.message(Admins.new_question)
async def new_question(message: types.Message, state: FSMContext):
    msg = message.text.split('|')
    survey_index = int(msg[0])
    quest_text = msg[1]
    quest_index = 1
    try:
        async with aiohttp.ClientSession() as session:
            response = await session.get(f"http://127.0.0.1:8000/api/get_questions/{survey_index}")
            response = await response.json()
        if response['data']:
            quest_index = response['data'][-1]['question_index'] + 1

    except Exception as e:
        print(e)
    await database_scripts.add_question(quest_index, survey_index, quest_text)
    await state.clear()
    await admin_command(message)


@dp.message(Admins.edit_question)
async def commit_question(message: types.Message, state: FSMContext):
    edited_question = message.text
    data = await state.get_data()
    await database_scripts.change_question(int(data['question_index']), int(data['survey_index']), edited_question)
    await message.answer('–£—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –≤–æ–ø—Ä–æ—Å')
    await admin_command(message)


@dp.callback_query(F.data.startswith('personal_lk'))
async def personal_lk(call: CallbackQuery):
    req = f"http://127.0.0.1:8000/api/get_user/{call.from_user.id}"
    async with aiohttp.ClientSession() as session:
        data = await session.get(req)
        data = await data.json()
    text = f'''*–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{call.from_user.username}*\n
üÜî: {call.message.from_user.id}\n
–ü—Ä–æ–π–¥–µ–Ω–æ –æ–ø—Ä–æ—Å–æ–≤ ‚úîÔ∏è: {data['surveys_count']}\n
–ü–æ–ª: {'üë®' if data['sex'] == '–ú—É–∂—Å–∫–æ–π' else 'üë©'}\n
–í–æ–∑—Ä–∞—Å—Ç: {data['age']}\n
–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ üéì: {data['education']}\n\n'''
    if data['role'] == 'user':
        text += '–í–∞—à–∞ —Ä–æ–ª—å: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
    elif data['role'] == 'admin':
        text += '–í–∞—à–∞ —Ä–æ–ª—å: –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'
    elif data['role'] == 'psychologist':
        text += '–í–∞—à–∞ —Ä–æ–ª—å: –ø—Å–∏—Ö–æ–ª–æ–≥'
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –≤–æ–∑—Ä–∞—Å—Ç",callback_data="lk_change_age"))
    builder.row(InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–ª",callback_data="lk_change_sex"))
    builder.row(InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ",callback_data="lk_change_education"))
    await call.message.answer(text,parse_mode=ParseMode.MARKDOWN,reply_markup=builder.as_markup())
@dp.callback_query(F.data.startswith('lk_change_sex'))
async def lk_change_sex(call: CallbackQuery):
    user_data = await database_scripts.get_user_stats(call.from_user.id)
    sex = user_data['sex']
    if sex == '–ú—É–∂—Å–∫–æ–π':
        await database_scripts.change_user_stat(int(call.from_user.id), 'sex','–ñ–µ–Ω—Å–∫–∏–π')
    else:
        await database_scripts.change_user_stat(int(call.from_user.id), 'sex', '–ú—É–∂—Å–∫–æ–π')
    await call.message.delete()
    await personal_lk(call)


@dp.callback_query(F.data.startswith('lk_change_age'))
async def lk_change_age(call: CallbackQuery,state: FSMContext):
    await call.message.delete()
    user_data = await database_scripts.get_user_stats(call.from_user.id)
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç: ")
    await state.set_state(UserChanges.age)
    await state.update_data(callback=call)
@dp.message(UserChanges.age)
async def lk_change_age_commit(message: types.Message,state: FSMContext):
    age = message.text
    data = await state.get_data()
    if not age.isdecimal() or not(16 < int(age) < 100):
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç: ')
    else:
        await database_scripts.change_user_stat(message.from_user.id, 'age', int(age))
        await personal_lk(data['callback'])
        await state.clear()
@dp.callback_query(F.data.startswith('lk_change_education'))
async def lk_change_education(call: CallbackQuery,state: FSMContext):
    user_data = await database_scripts.get_user_stats(call.from_user.id)
    kb = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[[KeyboardButton(text='–í—ã—Å—à–µ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ')],
                                                             [KeyboardButton(text='–û—Å–Ω–æ–≤–Ω–æ–µ –æ–±—â–µ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ')],
                                                             [KeyboardButton(text='–°—Ä–µ–¥–Ω–µ–µ –æ–±—â–µ–µ')]])
    await call.message.delete()
    await call.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è: ',reply_markup=kb)
    await state.set_state(UserChanges.education)
    await state.update_data(callback=call)
@dp.message(UserChanges.education)
async def lk_change_education_commit(message: types.Message,state: FSMContext):
    education = message.text
    data = await state.get_data()
    if education not in ['–í—ã—Å—à–µ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ','–û—Å–Ω–æ–≤–Ω–æ–µ –æ–±—â–µ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ','–°—Ä–µ–¥–Ω–µ–µ –æ–±—â–µ–µ']:
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è: ')
    else:
        await database_scripts.change_user_stat(message.from_user.id, 'education', education)
        await message.answer('–ò–∑–º–µ–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!',reply_markup=types.ReplyKeyboardRemove())
        await personal_lk(data['callback'])
        await state.clear()
@dp.message(F.text == "–ù–∞–∑–∞–¥ üîô")
@dp.message(Command("start"))
async def start(message: types.Message, state: FSMContext):
    if message.from_user.id not in await database_scripts.all_users():
        await message.answer('–í—ã –≤ –Ω–∞—à–µ–º —Å–µ—Ä–≤–∏—Å–µ –≤–ø–µ—Ä–≤—ã–µ. –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç')
        await state.set_state(UserConfig.age)
    else:
        keyboard = InlineKeyboardBuilder()
        keyboard.row(types.InlineKeyboardButton(text='–ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å', callback_data='start_test'))
        keyboard.row(types.InlineKeyboardButton(text='–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç', callback_data='personal_lk'))
        username = message.from_user.username
        if str(message.from_user.id) not in ADMINS:
            text = f'''–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, @{username}, —è Mireya. –ó–¥–µ—Å—å –Ω–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –∏–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ - —Ç–æ–ª—å–∫–æ —Ç–≤–æ–∏ –æ—â—É—â–µ–Ω–∏—è. –°–µ–π—á–∞—Å –º–Ω–µ –≤–∞–∂–Ω–æ –ª—É—á—à–µ —É–∑–Ω–∞—Ç—å, —á—Ç–æ —Ç—ã —á—É–≤—Å—Ç–≤—É–µ—à—å, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∫–∞—Ä—Ç–∏–Ω—É —Ç–≤–æ–µ–≥–æ –¥—É—à–µ–≤–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è. –î–ª—è —ç—Ç–æ–≥–æ —è –ø—Ä–µ–¥–ª–æ–∂—É –∫–æ—Ä–æ—Ç–∫–∏–π –æ–ø—Ä–æ—Å. –û–Ω –æ—á–µ–Ω—å –ø—Ä–æ—Å—Ç–æ–π, –Ω–æ —Å –µ–≥–æ –ø–æ–º–æ—â—å—é –º—ã —Å–º–æ–∂–µ–º –≤–º–µ—Å—Ç–µ —á—É—Ç—å —è—Å–Ω–µ–µ –≤–∑–≥–ª—è–Ω—É—Ç—å –Ω–∞ —Ç–≤–æ–∏ —ç–º–æ—Ü–∏–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ.'''
            await message.answer(text, reply_markup=types.ReplyKeyboardRemove())
        if str(message.from_user.id) in ADMINS:
            text = f'''–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä (/admin)'''
            await message.answer(text, reply_markup=types.ReplyKeyboardRemove())
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ', reply_markup=keyboard.as_markup())


@dp.message(UserConfig.age)
async def age_setup(message: types.Message, state: FSMContext):
    age = message.text
    if not age.isdigit() or not (14 < int(age) < 100):
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç')
    else:
        await state.update_data(age=age)
        kb = ReplyKeyboardMarkup(resize_keyboard=True,
                                 keyboard=[[KeyboardButton(text='–ú—É–∂—Å–∫–æ–π üë®')], [KeyboardButton(text='–ñ–µ–Ω—Å–∫–∏–π üë©')]])
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª:', reply_markup=kb)
        await state.set_state(UserConfig.sex)


@dp.message(UserConfig.sex)
async def sex_setup(message: types.Message, state: FSMContext):
    sex = message.text.split()[0]
    await state.update_data(sex=sex)
    kb = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[[KeyboardButton(text='–í—ã—Å—à–µ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ')],
                                                             [KeyboardButton(text='–û—Å–Ω–æ–≤–Ω–æ–µ –æ–±—â–µ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ')],
                                                             [KeyboardButton(text='–°—Ä–µ–¥–Ω–µ–µ –æ–±—â–µ–µ')]])
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è: ', reply_markup=kb)
    await state.set_state(UserConfig.education)


@dp.message(UserConfig.education)
async def finish_setup(message: types.Message, state: FSMContext):
    education = message.text
    data = await state.get_data()
    sex = data['sex'].split()[0]
    age = data['age']
    if education not in ['–í—ã—Å—à–µ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ','–û—Å–Ω–æ–≤–Ω–æ–µ –æ–±—â–µ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ','–°—Ä–µ–¥–Ω–µ–µ –æ–±—â–µ–µ']:
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è: ')
    else:
        if str(message.from_user.id) in ADMINS:
            await database_scripts.create_user(message.from_user.id, 'admin', 0)
        else:
            await database_scripts.create_user(message.from_user.id, 'user', 0)
        await database_scripts.change_user_stat(message.from_user.id, 'education', education)
        await database_scripts.change_user_stat(message.from_user.id, 'sex', sex)
        await database_scripts.change_user_stat(message.from_user.id, 'age', int(age))
        await start(message, state)


async def ask_question(message: types.Message, state: FSMContext):
    data = await state.get_data()
    question_n = data['question_n']
    question_list = data['question_list']
    current_question = [i['question_text'] for i in question_list if i['question_index'] == question_n][0]
    await message.answer(current_question)


async def finish_test(message: types.Message, state: FSMContext):
    data = await state.get_data()
    survey_n = data['question_list'][0]['survey_index']
    user_data = await database_scripts.get_user_stats(message.from_user.id)
    global_n = data['global_n']
    surveys_user_c = user_data['surveys_count']
    results_list = user_data['all_user_global_attempts']
    if results_list is None:
        results_list = []
    results_list.append(global_n)
    if surveys_user_c is None:
        surveys_user_c = 0
    await database_scripts.change_user_stat(message.from_user.id, 'last_survey_index', survey_n)
    await database_scripts.change_user_stat(message.from_user.id, 'surveys_count', surveys_user_c + 1)
    await database_scripts.change_user_stat(message.from_user.id, 'all_user_global_attempts', results_list)
    await state.clear()
    await message.answer('–û–ø—Ä–æ—Å –∑–∞–≤–µ—Ä–µ—à–µ–Ω. –¢–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã, –∏ —Å–µ–π—á–∞—Å —Ç—ã —É–≤–∏–¥–∏—à—å —Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—å —Å—Ç—Ä–µ—Å—Å–∞/—Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç–∏')
    user_answers = await database_scripts.get_answers_by_global_attempt(int(global_n))
    user_answers.sort(key=lambda x: x['question_index'])
    user_answers = [i['response_text'] for i in user_answers]
    ans_form = await scripts.form_gad7_survey_1(user_answers, user_data['sex'], user_data['age'],
                                                user_data['education'])
    predicted_level = await scripts.predict_stress_level(ans_form)
    kb = types.ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text='–ù–∞–∑–∞–¥ üîô')]],resize_keyboard=True)
    await message.answer(f'–ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–π —É—Ä–æ–≤–µ–Ω—å —Å—Ç—Ä–µ—Å—Å–∞/—Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç–∏: {predicted_level}%', reply_markup=kb)
    await database_scripts.add_survey_result(message.from_user.id, global_n, survey_n,
                                             str(datetime.datetime.now().strftime('%Y-%M-%D %H:%M:%S')),
                                             predicted_level)


@dp.callback_query(F.data.startswith("start_test"))
async def start_test(call: CallbackQuery, state: FSMContext):
    await state.clear()
    async with aiohttp.ClientSession() as session:
        data = await session.get(f"http://127.0.0.1:8000/api/{call.from_user.id}/get_question_list")
        data = await data.json()
    global_surveys_n = list(set(await database_scripts.all_global_attempts()))
    global_surveys_n.sort()
    if not global_surveys_n:
        global_surveys_n = [0]
    await state.update_data(question_list=data)
    await state.update_data(question_n=1)
    await state.update_data(global_n=global_surveys_n[-1] + 1)
    await state.set_state(Questions.questions)
    await ask_question(call.message, state)


@dp.message(Questions.questions)
async def message_test(message: types.Message, state: FSMContext):
    text = message.text
    data = await state.get_data()
    question_n = data['question_n']
    question_list = data['question_list']
    global_n = data['global_n']
    survey_n = question_list[0]['survey_index']
    async with aiohttp.ClientSession() as session:
        await session.get(
            f"http://127.0.0.1:8000/api/add_question/{message.from_user.id}&{survey_n}&{question_n}&{text}&{global_n}&{datetime.datetime.now()}")
    if question_n == len(question_list):
        await finish_test(message, state)
        return None
    question_n += 1
    await state.update_data(question_n=question_n)
    await ask_question(message, state)


async def main():
    await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(main())
