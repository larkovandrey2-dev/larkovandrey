import asyncio
import logging
from email import message
from sqlite3 import SQLITE_READ

import requests
import datetime
import os
import database_scripts
import kbs.inline as inline
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters.command import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import CallbackQuery, sticker, ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from supabase import create_client, Client
from datetime import date


ADMINS = os.getenv("ADMINS")
logging.basicConfig(level=logging.INFO)
bot = Bot(token="8466015804:AAEt2BWKawjYRbBxhiinKB3JCZaw0-1NMTU")

#–ê–¥–º–∏–Ω–∫–∞ - –¥–æ–±–∞–≤–ª—è—Ç—å –≤–æ–ø—Ä–æ—Å—ã,—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã,–º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å –≤—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ

dp = Dispatcher()
class UserConfig(StatesGroup):
    age = State()
    sex = State()
    education = State()
class Questions(StatesGroup):
    questions = State()
class Admins(StatesGroup):
    edit_question = State()
    new_question = State()
@dp.message(Command('admin'))
async def admin_command(message: types.Message):
    if str(message.from_user.id) in ADMINS:
        builder = await inline.create_admin_commands()
        await message.answer('–î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ',reply_markup=builder.as_markup())
    else:
        await message.answer('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.')

@dp.callback_query(F.data.startswith('admin_show_questions'))
async def admin_show_questions_actions(call: CallbackQuery):
    if str(call.from_user.id) in ADMINS:
        await call.message.answer('–ú–æ–∂–µ—Ç–µ –º–µ–Ω—è—Ç—å –≤–æ–ø—Ä–æ—Å–∏–∫–∏')
        text = '–¢–µ–∫—É—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã:\n'
        for i in questions:
            text += f'\n{questions.index(i)+1}. {i}'
        builder = await inline.create_edit_questions_kb(questions)
        await call.message.answer(text, reply_markup=builder.as_markup())

@dp.callback_query(F.data.startswith('question_'))
async def edit_question(call: CallbackQuery, state: FSMContext):
    data = call.data.split('_')
    if data[1] != 'create':
        await call.message.answer('–ù–∞–ø–∏—à–∏ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞')
        await state.set_state(Admins.edit_question)
        await state.update_data(question_n = data[1])
    else:
        await call.message.answer('–ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –¥–ª—è –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞')
        await state.set_state(Admins.new_question)


@dp.message(Admins.new_question)
async def new_question(message: types.Message, state: FSMContext):
    if type(message.text) == str:
        await message.answer('–í–æ–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω')
        questions.append(message.text)
        await state.clear()
        await admin_command(message)
@dp.message(Admins.edit_question)
async def commit_question(message: types.Message, state: FSMContext):
    data = await state.get_data()
    question_n = data['question_n']
    if type(message.text) is not str:
        await message.answer('–ê–π-–∞–π-–∞–π, –∫–∞–∫–æ–π-—Ç–æ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö')
        return None
    questions[int(question_n)] = message.text
    for id in ADMINS:
        await bot.send_message(id, f'–ê–¥–º–∏–Ω—ã –≤–Ω–∏–º–∞–Ω–∏–µ! @{message.from_user.username} –∏–∑–º–µ–Ω–∏–ª –≤–æ–ø—Ä–æ—Å {int(question_n) + 1} –Ω–∞ {message.text}')

    await message.answer('–£—Å–ø–µ—à–Ω–æ')
    await state.clear()

@dp.callback_query(F.data.startswith('personal_lk'))
async def personal_lk(call: CallbackQuery, state: FSMContext):
    req = f"http://127.0.0.1:8000/api/get_user/{call.from_user.id}"
    data = requests.get(req).json()
    text = f'''–í–∞—à username: @{call.from_user.username}
–í–∞—à ID: {call.message.from_user.id}
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö –æ–ø—Ä–æ—Å–æ–≤: {data['surveys_count']}\n'''
    if data['role'] == 'user':
        text += '–í–∞—à–∞ —Ä–æ–ª—å: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
    elif data['role'] == 'admin':
        text += '–í–∞—à–∞ —Ä–æ–ª—å: –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'
    elif data['role'] == 'psychologist':
        text += '–í–∞—à–∞ —Ä–æ–ª—å: –ø—Å–∏—Ö–æ–ª–æ–≥'
    await call.message.answer(text)
@dp.message(Command("start"))
async def start(message: types.Message,state: FSMContext):
    users_id = database_scripts.all_users()
    if str(message.from_user.id) not in 'aa':
        await message.answer('–í—ã –≤ –Ω–∞—à–µ–º —Å–µ—Ä–≤–∏—Å–µ –≤–ø–µ—Ä–≤—ã–µ. –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç')
        await state.set_state(UserConfig.age)
    req = requests.get(f"http://127.0.0.1:8000/api/register_user/{message.from_user.id}")
    keyboard = InlineKeyboardBuilder()
    keyboard.row(types.InlineKeyboardButton(text='–ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å',callback_data='start_test'))
    keyboard.row(types.InlineKeyboardButton(text='–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç',callback_data='personal_lk'))
    username = message.from_user.username
    if str(message.from_user.id) not in ADMINS:
        text = f'''–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, @{username}, —è Mireya. –ó–¥–µ—Å—å –Ω–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –∏–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ - —Ç–æ–ª—å–∫–æ —Ç–≤–æ–∏ –æ—â—É—â–µ–Ω–∏—è. –°–µ–π—á–∞—Å –º–Ω–µ –≤–∞–∂–Ω–æ –ª—É—á—à–µ —É–∑–Ω–∞—Ç—å, —á—Ç–æ —Ç—ã —á—É–≤—Å—Ç–≤—É–µ—à—å, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∫–∞—Ä—Ç–∏–Ω—É —Ç–≤–æ–µ–≥–æ –¥—É—à–µ–≤–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è. –î–ª—è —ç—Ç–æ–≥–æ —è –ø—Ä–µ–¥–ª–æ–∂—É –∫–æ—Ä–æ—Ç–∫–∏–π –æ–ø—Ä–æ—Å. –û–Ω –æ—á–µ–Ω—å –ø—Ä–æ—Å—Ç–æ–π, –Ω–æ —Å –µ–≥–æ –ø–æ–º–æ—â—å—é –º—ã —Å–º–æ–∂–µ–º –≤–º–µ—Å—Ç–µ —á—É—Ç—å —è—Å–Ω–µ–µ –≤–∑–≥–ª—è–Ω—É—Ç—å –Ω–∞ —Ç–≤–æ–∏ —ç–º–æ—Ü–∏–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ.'''
        await message.answer(text,reply_markup=keyboard.as_markup())
    if str(message.from_user.id) in ADMINS:
        text = f'''–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä (/admin)'''
        await message.answer(text,reply_markup=keyboard.as_markup())

@dp.message(UserConfig.age)
async def age_setup(message: types.Message, state: FSMContext):
    age = message.text
    if not age.isdigit() or not (12 < int(age) < 100):
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç')
    else:
        await state.update_data(age=age)
        kb = ReplyKeyboardMarkup(resize_keyboard=True,keyboard=[[KeyboardButton(text='–ú—É–∂—Å–∫–æ–π üë®')],[KeyboardButton(text='–ñ–µ–Ω—Å–∫–∏–π üë©')]])
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª:',reply_markup=kb)
        await state.set_state(UserConfig.sex)
@dp.message(UserConfig.sex)
async def sex_setup(message: types.Message, state: FSMContext):
    sex = message.text.split()[0]
    await state.update_data(sex=sex)
    kb = ReplyKeyboardMarkup(resize_keyboard=True,keyboard=[[KeyboardButton(text='–í—ã—Å—à–µ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ')],[KeyboardButton(text='–û—Å–Ω–æ–≤–Ω–æ–µ –æ–±—â–µ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ')],[KeyboardButton(text='–°—Ä–µ–¥–Ω–µ–µ –æ–±—â–µ–µ')]])
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è: ',reply_markup=kb)
    await state.set_state(UserConfig.education)
@dp.message(UserConfig.education)
async def finish_setup(message: types.Message, state: FSMContext):
    education = message.text
    data = await state.get_data()
    print(data,education)

async def ask_question(message: types.Message,state: FSMContext):
    data = await state.get_data()
    print(data)
    question_n = data['question_n']
    question_list = data['question_list']
    await message.answer(question_list[question_n])
async def finish_test(message: types.Message,state: FSMContext):
    await state.clear()
    await message.answer('–û–ø—Ä–æ—Å –∑–∞–≤–µ—Ä–µ—à–µ–Ω')
@dp.callback_query(F.data.startswith("start_test"))
async def start_test(call: CallbackQuery,state: FSMContext):
    data = requests.get(f"http://127.0.0.1:8000/api/{call.from_user.id}/get_question_list").json()
    questions = data['question_list']
    await state.update_data(question_list=questions)
    await state.update_data(question_n=0)
    await state.set_state(Questions.questions)
    await ask_question(call.message,state)



@dp.message(Questions.questions)
async def message_test(message: types.Message,state: FSMContext):
    text = message.text
    data = await state.get_data()
    question_n = data['question_n']
    question_list = data['question_list']
    requests.get(f"http://127.0.0.1:8000/api/add_answer/{message.from_user.id}/{question_n}&{text}&{datetime.datetime.now()}")
    question_n += 1
    if question_n == len(question_list):
        await finish_test(message,state)
    await state.update_data(question_n=question_n)
    await ask_question(message,state)


async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
